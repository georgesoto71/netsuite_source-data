{% macro get_transaction_lines_columns() %}

{% set columns = [
    {"name": "_fivetran_deleted", "datatype": "boolean"},
    {"name": "_fivetran_synced", "datatype": dbt_utils.type_timestamp()},
    {"name": "account_id", "datatype": dbt_utils.type_float()},
    {"name": "adjustment_field", "datatype": dbt_utils.type_string()},
    {"name": "adjustment_tax_code_id", "datatype": dbt_utils.type_float()},
    {"name": "alt_sales_amount", "datatype": dbt_utils.type_float()},
    {"name": "amortization_residual", "datatype": dbt_utils.type_string()},
    {"name": "amount", "datatype": dbt_utils.type_float()},
    {"name": "amount_foreign", "datatype": dbt_utils.type_float()},
    {"name": "amount_foreign_linked", "datatype": dbt_utils.type_float()},
    {"name": "amount_linked", "datatype": dbt_utils.type_float()},
    {"name": "amount_pending", "datatype": dbt_utils.type_float()},
    {"name": "amount_settlement", "datatype": dbt_utils.type_float()},
    {"name": "amount_taxable", "datatype": dbt_utils.type_float()},
    {"name": "amount_taxed", "datatype": dbt_utils.type_float()},
    {"name": "annual_prorate", "datatype": dbt_utils.type_float()},
    {"name": "bill_variance_status", "datatype": dbt_utils.type_string()},
    {"name": "billing_schedule_id", "datatype": dbt_utils.type_float()},
    {"name": "billing_subsidiary_id", "datatype": dbt_utils.type_float()},
    {"name": "bom_quantity", "datatype": dbt_utils.type_float()},
    {"name": "catch_up_period_id", "datatype": dbt_utils.type_float()},
    {"name": "charge_rule_id", "datatype": dbt_utils.type_float()},
    {"name": "charge_type", "datatype": dbt_utils.type_float()},
    {"name": "class_id", "datatype": dbt_utils.type_float()},
    {"name": "code_of_supply_id", "datatype": dbt_utils.type_float()},
    {"name": "company_id", "datatype": dbt_utils.type_float()},
    {"name": "component_id", "datatype": dbt_utils.type_float()},
    {"name": "component_yield", "datatype": dbt_utils.type_float()},
    {"name": "cost_estimate_type", "datatype": dbt_utils.type_string()},
    {"name": "counterparty_vat_number", "datatype": dbt_utils.type_string()},
    {"name": "country_of_origin", "datatype": dbt_utils.type_string()},
    {"name": "country_of_origin_code", "datatype": dbt_utils.type_string()},
    {"name": "date_cleared", "datatype": dbt_utils.type_timestamp()},
    {"name": "date_closed", "datatype": dbt_utils.type_timestamp()},
    {"name": "date_created", "datatype": dbt_utils.type_timestamp()},
    {"name": "date_deleted", "datatype": dbt_utils.type_timestamp()},
    {"name": "date_last_modified", "datatype": dbt_utils.type_timestamp()},
    {"name": "date_last_modified_gmt", "datatype": dbt_utils.type_timestamp()},
    {"name": "date_requested", "datatype": dbt_utils.type_timestamp()},
    {"name": "date_revenue_committed", "datatype": dbt_utils.type_timestamp()},
    {"name": "delay_rev_rec", "datatype": dbt_utils.type_string()},
    {"name": "department_id", "datatype": dbt_utils.type_float()},
    {"name": "details_of_subject_and_exem_id", "datatype": dbt_utils.type_float()},
    {"name": "do_not_display_line", "datatype": dbt_utils.type_string()},
    {"name": "do_not_print_line", "datatype": dbt_utils.type_string()},
    {"name": "do_restock", "datatype": dbt_utils.type_string()},
    {"name": "emirate_id", "datatype": dbt_utils.type_float()},
    {"name": "establishment_code", "datatype": dbt_utils.type_string()},
    {"name": "estimated_cost", "datatype": dbt_utils.type_float()},
    {"name": "estimated_cost_foreign", "datatype": dbt_utils.type_float()},
    {"name": "eu_triangulation", "datatype": dbt_utils.type_string()},
    {"name": "expected_receipt_date", "datatype": dbt_utils.type_timestamp()},
    {"name": "expense_account_id", "datatype": dbt_utils.type_float()},
    {"name": "expense_category_id", "datatype": dbt_utils.type_float()},
    {"name": "gl_number", "datatype": dbt_utils.type_string()},
    {"name": "gl_sequence", "datatype": dbt_utils.type_string()},
    {"name": "gl_sequence_id", "datatype": dbt_utils.type_float()},
    {"name": "gross_amount", "datatype": dbt_utils.type_float()},
    {"name": "gross_amount1", "datatype": dbt_utils.type_float()},
    {"name": "gross_amount_0", "datatype": dbt_utils.type_float()},
    {"name": "handling_amount", "datatype": dbt_utils.type_float()},
    {"name": "handling_amount1", "datatype": dbt_utils.type_float()},
    {"name": "has_cost_line", "datatype": dbt_utils.type_string()},
    {"name": "is_allocation", "datatype": dbt_utils.type_string()},
    {"name": "is_amortization_rev_rec", "datatype": dbt_utils.type_string()},
    {"name": "is_commitment_confirmed", "datatype": dbt_utils.type_string()},
    {"name": "is_cost_line", "datatype": dbt_utils.type_string()},
    {"name": "is_custom_line", "datatype": dbt_utils.type_string()},
    {"name": "is_exclude_from_rate_request", "datatype": dbt_utils.type_string()},
    {"name": "is_fx_variance", "datatype": dbt_utils.type_string()},
    {"name": "is_item_value_adjustment", "datatype": dbt_utils.type_string()},
    {"name": "is_landed_cost", "datatype": dbt_utils.type_string()},
    {"name": "is_scrap", "datatype": dbt_utils.type_string()},
    {"name": "is_vsoe_allocation_line", "datatype": dbt_utils.type_string()},
    {"name": "isbillable", "datatype": dbt_utils.type_string()},
    {"name": "iscleared", "datatype": dbt_utils.type_string()},
    {"name": "isnonreimbursable", "datatype": dbt_utils.type_string()},
    {"name": "istaxable", "datatype": dbt_utils.type_string()},
    {"name": "item_count", "datatype": dbt_utils.type_float()},
    {"name": "item_id", "datatype": dbt_utils.type_float()},
    {"name": "item_received", "datatype": dbt_utils.type_string()},
    {"name": "item_source", "datatype": dbt_utils.type_string()},
    {"name": "item_unit_price", "datatype": dbt_utils.type_string()},
    {"name": "kit_part_number", "datatype": dbt_utils.type_float()},
    {"name": "landed_cost_source_line_id", "datatype": dbt_utils.type_float()},
    {"name": "location_id", "datatype": dbt_utils.type_float()},
    {"name": "match_bill_to_receipt", "datatype": dbt_utils.type_string()},
    {"name": "memo", "datatype": dbt_utils.type_string()},
    {"name": "needs_revenue_element", "datatype": dbt_utils.type_string()},
    {"name": "net_amount", "datatype": dbt_utils.type_float()},
    {"name": "net_amount_foreign", "datatype": dbt_utils.type_float()},
    {"name": "ng_asset_id", "datatype": dbt_utils.type_float()},
    {"name": "ng_asset_schedule_entry_id", "datatype": dbt_utils.type_float()},
    {"name": "ng_asset_type_id", "datatype": dbt_utils.type_float()},
    {"name": "ng_lessee_lease_line_id", "datatype": dbt_utils.type_float()},
    {"name": "ng_lessee_schedule_entry_li_id", "datatype": dbt_utils.type_float()},
    {"name": "non_posting_line", "datatype": dbt_utils.type_string()},
    {"name": "notc_id", "datatype": dbt_utils.type_float()},
    {"name": "number_billed", "datatype": dbt_utils.type_float()},
    {"name": "operation_sequence_number", "datatype": dbt_utils.type_float()},
    {"name": "order_priority", "datatype": dbt_utils.type_float()},
    {"name": "payment_method_id", "datatype": dbt_utils.type_float()},
    {"name": "payroll_item_id", "datatype": dbt_utils.type_float()},
    {"name": "payroll_wage_base_amount", "datatype": dbt_utils.type_float()},
    {"name": "payroll_year_to_date_amount", "datatype": dbt_utils.type_float()},
    {"name": "period_closed", "datatype": dbt_utils.type_timestamp()},
    {"name": "pick_up", "datatype": dbt_utils.type_string()},
    {"name": "po_line_id", "datatype": dbt_utils.type_string()},
    {"name": "price_type_id", "datatype": dbt_utils.type_float()},
    {"name": "project_code", "datatype": dbt_utils.type_string()},
    {"name": "project_task_id", "datatype": dbt_utils.type_float()},
    {"name": "purchase_contract_id", "datatype": dbt_utils.type_float()},
    {"name": "quantity_allocated", "datatype": dbt_utils.type_float()},
    {"name": "quantity_committed", "datatype": dbt_utils.type_float()},
    {"name": "quantity_packed", "datatype": dbt_utils.type_float()},
    {"name": "quantity_picked", "datatype": dbt_utils.type_float()},
    {"name": "quantity_received_in_shipment", "datatype": dbt_utils.type_float()},
    {"name": "receipt_url", "datatype": dbt_utils.type_string()},
    {"name": "receivebydate", "datatype": dbt_utils.type_timestamp()},
    {"name": "reimbursement_type", "datatype": dbt_utils.type_string()},
    {"name": "related_company_id", "datatype": dbt_utils.type_float()},
    {"name": "rev_rec_end_date", "datatype": dbt_utils.type_timestamp()},
    {"name": "rev_rec_end_date_0", "datatype": dbt_utils.type_timestamp()},
    {"name": "rev_rec_rule_id", "datatype": dbt_utils.type_float()},
    {"name": "rev_rec_start_date", "datatype": dbt_utils.type_timestamp()},
    {"name": "rev_rec_start_date_0", "datatype": dbt_utils.type_timestamp()},
    {"name": "revenue_element_id", "datatype": dbt_utils.type_float()},
    {"name": "salesforce_discount_item_id", "datatype": dbt_utils.type_float()},
    {"name": "salesforce_discount_rate", "datatype": dbt_utils.type_float()},
    {"name": "salesforce_line_id", "datatype": dbt_utils.type_string()},
    {"name": "schedule_id", "datatype": dbt_utils.type_float()},
    {"name": "service_date", "datatype": dbt_utils.type_timestamp()},
    {"name": "shipdate", "datatype": dbt_utils.type_timestamp()},
    {"name": "shipment_received", "datatype": dbt_utils.type_timestamp()},
    {"name": "shipping_amount", "datatype": dbt_utils.type_float()},
    {"name": "shipping_amount1", "datatype": dbt_utils.type_float()},
    {"name": "shipping_group_id", "datatype": dbt_utils.type_float()},
    {"name": "shipto_entityuse_code_id", "datatype": dbt_utils.type_float()},
    {"name": "shipto_latitude", "datatype": dbt_utils.type_string()},
    {"name": "shipto_longitude", "datatype": dbt_utils.type_string()},
    {"name": "source_subsidiary_id", "datatype": dbt_utils.type_float()},
    {"name": "statistical_procedure_for_p_id", "datatype": dbt_utils.type_float()},
    {"name": "statistical_procedure_for_s_id", "datatype": dbt_utils.type_float()},
    {"name": "statistical_value", "datatype": dbt_utils.type_float()},
    {"name": "statistical_value__base_curre", "datatype": dbt_utils.type_float()},
    {"name": "subscription_line_id", "datatype": dbt_utils.type_float()},
    {"name": "subsidiary_id", "datatype": dbt_utils.type_float()},
    {"name": "tax_item_id", "datatype": dbt_utils.type_float()},
    {"name": "tax_type", "datatype": dbt_utils.type_string()},
    {"name": "term_end_date", "datatype": dbt_utils.type_timestamp()},
    {"name": "term_in_months", "datatype": dbt_utils.type_float()},
    {"name": "term_start_date", "datatype": dbt_utils.type_timestamp()},
    {"name": "term_type_id", "datatype": dbt_utils.type_float()},
    {"name": "tobeemailed", "datatype": dbt_utils.type_string()},
    {"name": "tobefaxed", "datatype": dbt_utils.type_string()},
    {"name": "tobeprinted", "datatype": dbt_utils.type_string()},
    {"name": "transaction_discount_line", "datatype": dbt_utils.type_string()},
    {"name": "transaction_id", "datatype": dbt_utils.type_float()},
    {"name": "transaction_line_id", "datatype": dbt_utils.type_float()},
    {"name": "transaction_order", "datatype": dbt_utils.type_float()},
    {"name": "transfer_order_item_line", "datatype": dbt_utils.type_float()},
    {"name": "transfer_order_line_type", "datatype": dbt_utils.type_string()},
    {"name": "udf1", "datatype": dbt_utils.type_string()},
    {"name": "udf2", "datatype": dbt_utils.type_string()},
    {"name": "unique_key", "datatype": dbt_utils.type_float()},
    {"name": "unit_cost_override", "datatype": dbt_utils.type_float()},
    {"name": "unit_of_measure_id", "datatype": dbt_utils.type_float()},
    {"name": "vsoe_allocation", "datatype": dbt_utils.type_float()},
    {"name": "vsoe_amt", "datatype": dbt_utils.type_float()},
    {"name": "vsoe_deferral", "datatype": dbt_utils.type_string()},
    {"name": "vsoe_delivered", "datatype": dbt_utils.type_string()},
    {"name": "vsoe_discount", "datatype": dbt_utils.type_string()},
    {"name": "vsoe_price", "datatype": dbt_utils.type_float()}
] %}

{{ return(columns) }}

{% endmacro %}
